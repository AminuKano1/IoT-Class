#include <WiFiS3.h>
#include <ThingSpeak.h>
#include <DHT.h>

// WiFi credentials (replace with your own)
char ssid[] = "IoTwi-fi"; // Your WiFi SSID
char pass[] = "gkmrxuW6"; // Your WiFi password

// ThingSpeak settings (replace with your own)
unsigned long channelID = YOUR_CHANNEL_ID; // Your ThingSpeak Channel ID
const char* writeAPIKey = "YOUR_WRITE_API_KEY"; // Your Write API Key
WiFiClient client;

// Pin definitions
#define DHT_PIN 4        // DHT11 data pin
#define LDR_PIN A1       // Photoresistor pin
#define POT_PIN A2       // Potentiometer pin
#define BUTTON_PIN 2     // Button pin
#define LED_PIN 8        // LED pin for alerts
#define BUZZER_PIN 6     // Buzzer pin for alerts

// DHT11 setup
#define DHTTYPE DHT11
DHT dht(DHT_PIN, DHTTYPE);

// Button debouncing variables
int lastButtonState = HIGH; // Last state of the button (HIGH = not pressed due to pull-up)
unsigned long lastDebounceTime = 0; // Last time the button state changed
const unsigned long debounceDelay = 50; // Debounce time in milliseconds

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  
  // Set pin modes
  pinMode(BUTTON_PIN, INPUT_PULLUP); // Button with internal pull-up
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Ensure LED is off initially
  digitalWrite(BUZZER_PIN, LOW); // Ensure buzzer is off initially
  
  // Initialize DHT11
  dht.begin();
  delay(2000); // Wait for DHT11 to stabilize
  
  // Connect to WiFi
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, pass);
  int wifiAttempts = 0;
  while (WiFi.status() != WL_CONNECTED && wifiAttempts < 10) {
    delay(1000);
    Serial.print(".");
    wifiAttempts++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi. Check credentials.");
    return;
  }
  
  // Initialize ThingSpeak
  ThingSpeak.begin(client);
}

void loop() {
  // Read DHT11 sensor
  float temperature = dht.readTemperature(); // Temperature in °C
  float humidity = dht.readHumidity();       // Humidity in %
  
  // Check for DHT11 reading errors
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Error: Failed to read from DHT11 sensor!");
    delay(2000); // Wait before retrying
    return;
  }
  
  // Read other sensors
  int lightRaw = analogRead(LDR_PIN); // Light intensity (0-1023)
  int potRaw = analogRead(POT_PIN);   // Potentiometer value (0-1023)
  
  // Read button with debouncing
  int buttonReading = digitalRead(BUTTON_PIN);
  int buttonState = lastButtonState; // Default to last state
  if (buttonReading != lastButtonState) {
    lastDebounceTime = millis(); // Record time of state change
  }
  if ((millis() - lastDebounceTime) > debounceDelay) {
    buttonState = buttonReading; // Update state after debounce period
  }
  lastButtonState = buttonReading;
  int buttonValue = !buttonState; // Inverted: 1 = pressed, 0 = not pressed
  
  // Alert logic: Trigger LED and buzzer if temperature exceeds potentiometer threshold
  int alertStatus = 0;
  float tempThreshold = potRaw / 40.0; // Scale pot (0-1023) to ~0-25.6°C
  if (temperature > tempThreshold) {
    digitalWrite(LED_PIN, HIGH);
    digitalWrite(BUZZER_PIN, HIGH);
    alertStatus = 1;
  } else {
    digitalWrite(LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    alertStatus = 0;
  }
  
  // Print readings to Serial Monitor
  Serial.print("Temp: "); Serial.print(temperature); Serial.print(" °C, ");
  Serial.print("Humidity: "); Serial.print(humidity); Serial.print(" %, ");
  Serial.print("Light: "); Serial.print(lightRaw); Serial.print(", ");
  Serial.print("Pot: "); Serial.print(potRaw); Serial.print(", ");
  Serial.print("Button: "); Serial.print(buttonValue); Serial.print(", ");
  Serial.print("Alert: "); Serial.println(alertStatus);
  
  // Send data to ThingSpeak
  ThingSpeak.setField(1, temperature);
  ThingSpeak.setField(2, humidity);
  ThingSpeak.setField(3, lightRaw);
  ThingSpeak.setField(4, potRaw);
  ThingSpeak.setField(5, buttonValue);
  ThingSpeak.setField(6, alertStatus);
  int response = ThingSpeak.writeFields(channelID, writeAPIKey);
  
  if (response == 200) {
    Serial.println("Data sent to ThingSpeak successfully!");
  } else {
    Serial.println("Error sending data to ThingSpeak: HTTP " + String(response));
  }
  
  // Wait 20 seconds (ThingSpeak free tier limit)
  delay(20000);
}
